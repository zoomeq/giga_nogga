{"version":3,"file":"index.js","sourceRoot":"","sources":["../play-dl/index.ts"],"names":[],"mappings":"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","sourcesContent":["export { playlist_info, video_basic_info, video_info, yt_validate, extractID } from './YouTube';\r\nexport { spotify, sp_validate, refreshToken, is_expired } from './Spotify';\r\nexport { soundcloud, so_validate } from './SoundCloud';\r\n\r\ninterface SearchOptions {\r\n    limit?: number;\r\n    source?: {\r\n        youtube?: 'video' | 'playlist' | 'channel';\r\n        spotify?: 'album' | 'playlist' | 'track';\r\n        soundcloud?: 'tracks' | 'playlists' | 'albums';\r\n    };\r\n}\r\n\r\nimport readline from 'readline';\r\nimport fs from 'fs';\r\nimport { sp_validate, yt_validate, so_validate } from '.';\r\nimport { SpotifyAuthorize, sp_search } from './Spotify';\r\nimport { check_id, so_search, stream as so_stream, stream_from_info as so_stream_info } from './SoundCloud';\r\nimport { InfoData, stream as yt_stream, StreamOptions, stream_from_info as yt_stream_info } from './YouTube/stream';\r\nimport { SoundCloudTrack, Stream as SoStream } from './SoundCloud/classes';\r\nimport { LiveStreaming, Stream as YTStream } from './YouTube/classes/LiveStream';\r\nimport { yt_search } from './YouTube/search';\r\n\r\nexport async function stream(url: string, options: StreamOptions = {}): Promise<YTStream | LiveStreaming | SoStream> {\r\n    if (url.length === 0) throw new Error('Stream URL has a length of 0. Check your url again.');\r\n    if (url.indexOf('soundcloud') !== -1) return await so_stream(url, options.quality);\r\n    else return await yt_stream(url, { cookie: options.cookie });\r\n}\r\n\r\nexport async function search(query: string, options: SearchOptions = {}) {\r\n    if (!options.source) options.source = { youtube: 'video' };\r\n\r\n    if (options.source.youtube) return await yt_search(query, { limit: options.limit, type: options.source.youtube });\r\n    else if (options.source.spotify) return await sp_search(query, options.source.spotify, options.limit);\r\n    else if (options.source.soundcloud) return await so_search(query, options.source.soundcloud, options.limit);\r\n}\r\n\r\nexport async function stream_from_info(\r\n    info: InfoData | SoundCloudTrack,\r\n    options: StreamOptions = {}\r\n): Promise<YTStream | LiveStreaming | SoStream> {\r\n    if (info instanceof SoundCloudTrack) return await so_stream_info(info);\r\n    else return await yt_stream_info(info, { cookie: options.cookie });\r\n}\r\n\r\nexport async function validate(url: string): Promise<\"so_playlist\" | \"so_track\" | \"sp_track\" | \"sp_album\" | \"sp_playlist\" | \"yt_video\" | \"yt_playlist\" | false> {\r\n    let check;\r\n    if (url.indexOf('spotify') !== -1) {\r\n        check = sp_validate(url);\r\n        return check !== false ? 'sp_' + check as \"sp_track\" | \"sp_album\" | \"sp_playlist\" : false;\r\n    } else if (url.indexOf('soundcloud') !== -1) {\r\n        check = await so_validate(url);\r\n        return check !== false ? 'so_' + check as \"so_playlist\" | \"so_track\" : false;\r\n    } else {\r\n        check = yt_validate(url);\r\n        return check !== false ? 'yt_' + check as \"yt_video\" | \"yt_playlist\" : false;\r\n    }\r\n}\r\n\r\nexport function authorization(): void {\r\n    const ask = readline.createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout\r\n    });\r\n    ask.question('SoundCloud/ Spotify (so/sp) : ', (msg) => {\r\n        if (msg.toLowerCase().startsWith('sp')) {\r\n            let client_id: string, client_secret: string, redirect_url: string, market: string;\r\n            ask.question('Client ID : ', (id) => {\r\n                client_id = id;\r\n                ask.question('Client Secret : ', (secret) => {\r\n                    client_secret = secret;\r\n                    ask.question('Redirect URL : ', (url) => {\r\n                        redirect_url = url;\r\n                        console.log(\r\n                            '\\nMarket Selection URL : \\nhttps://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements \\n'\r\n                        );\r\n                        ask.question('Market : ', (mar) => {\r\n                            if (mar.length === 2) market = mar;\r\n                            else {\r\n                                console.log('Invalid Market, Selecting IN as market');\r\n                                market = 'IN';\r\n                            }\r\n                            console.log(\r\n                                '\\nNow Go to your browser and Paste this url. Authroize it and paste the redirected url here. \\n'\r\n                            );\r\n                            console.log(\r\n                                `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURI(\r\n                                    redirect_url\r\n                                )} \\n`\r\n                            );\r\n                            ask.question('Redirected URL : ', async (url) => {\r\n                                if (!fs.existsSync('.data')) fs.mkdirSync('.data');\r\n                                const spotifyData = {\r\n                                    client_id,\r\n                                    client_secret,\r\n                                    redirect_url,\r\n                                    authorization_code: url.split('code=')[1],\r\n                                    market\r\n                                };\r\n                                const check = await SpotifyAuthorize(spotifyData);\r\n                                if (check === false) throw new Error('Failed to get access Token.');\r\n                                ask.close();\r\n                            });\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        } else if (msg.toLowerCase().startsWith('so')) {\r\n            let client_id: string;\r\n            ask.question('Client ID : ', async (id) => {\r\n                client_id = id;\r\n                if (!client_id) {\r\n                    console.log(\"You didn't provided Client ID. Try again\");\r\n                    ask.close();\r\n                    return;\r\n                }\r\n                if (!fs.existsSync('.data')) fs.mkdirSync('.data');\r\n                console.log('Checking Client ID...................');\r\n                if (await check_id(client_id)) {\r\n                    console.log('Congratulations! Client ID is correct');\r\n                    fs.writeFileSync('.data/soundcloud.data', JSON.stringify({ client_id }, undefined, 4));\r\n                } else console.log('Client ID is incorrect. Try to run this again with correct client ID.');\r\n\r\n                ask.close();\r\n            });\r\n        } else {\r\n            console.log('Invalid Option, Please Try again');\r\n            ask.close();\r\n        }\r\n    });\r\n}\r\n"]}