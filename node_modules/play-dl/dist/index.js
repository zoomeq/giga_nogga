"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authorization = exports.validate = exports.stream_from_info = exports.search = exports.stream = exports.so_validate = exports.soundcloud = exports.is_expired = exports.refreshToken = exports.sp_validate = exports.spotify = exports.extractID = exports.yt_validate = exports.video_info = exports.video_basic_info = exports.playlist_info = void 0;
var YouTube_1 = require("./YouTube");
Object.defineProperty(exports, "playlist_info", { enumerable: true, get: function () { return YouTube_1.playlist_info; } });
Object.defineProperty(exports, "video_basic_info", { enumerable: true, get: function () { return YouTube_1.video_basic_info; } });
Object.defineProperty(exports, "video_info", { enumerable: true, get: function () { return YouTube_1.video_info; } });
Object.defineProperty(exports, "yt_validate", { enumerable: true, get: function () { return YouTube_1.yt_validate; } });
Object.defineProperty(exports, "extractID", { enumerable: true, get: function () { return YouTube_1.extractID; } });
var Spotify_1 = require("./Spotify");
Object.defineProperty(exports, "spotify", { enumerable: true, get: function () { return Spotify_1.spotify; } });
Object.defineProperty(exports, "sp_validate", { enumerable: true, get: function () { return Spotify_1.sp_validate; } });
Object.defineProperty(exports, "refreshToken", { enumerable: true, get: function () { return Spotify_1.refreshToken; } });
Object.defineProperty(exports, "is_expired", { enumerable: true, get: function () { return Spotify_1.is_expired; } });
var SoundCloud_1 = require("./SoundCloud");
Object.defineProperty(exports, "soundcloud", { enumerable: true, get: function () { return SoundCloud_1.soundcloud; } });
Object.defineProperty(exports, "so_validate", { enumerable: true, get: function () { return SoundCloud_1.so_validate; } });
const readline_1 = __importDefault(require("readline"));
const fs_1 = __importDefault(require("fs"));
const _1 = require(".");
const Spotify_2 = require("./Spotify");
const SoundCloud_2 = require("./SoundCloud");
const stream_1 = require("./YouTube/stream");
const classes_1 = require("./SoundCloud/classes");
const search_1 = require("./YouTube/search");
async function stream(url, options = {}) {
    if (url.length === 0)
        throw new Error('Stream URL has a length of 0. Check your url again.');
    if (url.indexOf('soundcloud') !== -1)
        return await SoundCloud_2.stream(url, options.quality);
    else
        return await stream_1.stream(url, { cookie: options.cookie });
}
exports.stream = stream;
async function search(query, options = {}) {
    if (!options.source)
        options.source = { youtube: 'video' };
    if (options.source.youtube)
        return await search_1.yt_search(query, { limit: options.limit, type: options.source.youtube });
    else if (options.source.spotify)
        return await Spotify_2.sp_search(query, options.source.spotify, options.limit);
    else if (options.source.soundcloud)
        return await SoundCloud_2.so_search(query, options.source.soundcloud, options.limit);
}
exports.search = search;
async function stream_from_info(info, options = {}) {
    if (info instanceof classes_1.SoundCloudTrack)
        return await SoundCloud_2.stream_from_info(info);
    else
        return await stream_1.stream_from_info(info, { cookie: options.cookie });
}
exports.stream_from_info = stream_from_info;
async function validate(url) {
    let check;
    if (url.indexOf('spotify') !== -1) {
        check = _1.sp_validate(url);
        return check !== false ? 'sp_' + check : false;
    }
    else if (url.indexOf('soundcloud') !== -1) {
        check = await _1.so_validate(url);
        return check !== false ? 'so_' + check : false;
    }
    else {
        check = _1.yt_validate(url);
        return check !== false ? 'yt_' + check : false;
    }
}
exports.validate = validate;
function authorization() {
    const ask = readline_1.default.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    ask.question('SoundCloud/ Spotify (so/sp) : ', (msg) => {
        if (msg.toLowerCase().startsWith('sp')) {
            let client_id, client_secret, redirect_url, market;
            ask.question('Client ID : ', (id) => {
                client_id = id;
                ask.question('Client Secret : ', (secret) => {
                    client_secret = secret;
                    ask.question('Redirect URL : ', (url) => {
                        redirect_url = url;
                        console.log('\nMarket Selection URL : \nhttps://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements \n');
                        ask.question('Market : ', (mar) => {
                            if (mar.length === 2)
                                market = mar;
                            else {
                                console.log('Invalid Market, Selecting IN as market');
                                market = 'IN';
                            }
                            console.log('\nNow Go to your browser and Paste this url. Authroize it and paste the redirected url here. \n');
                            console.log(`https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=code&redirect_uri=${encodeURI(redirect_url)} \n`);
                            ask.question('Redirected URL : ', async (url) => {
                                if (!fs_1.default.existsSync('.data'))
                                    fs_1.default.mkdirSync('.data');
                                const spotifyData = {
                                    client_id,
                                    client_secret,
                                    redirect_url,
                                    authorization_code: url.split('code=')[1],
                                    market
                                };
                                const check = await Spotify_2.SpotifyAuthorize(spotifyData);
                                if (check === false)
                                    throw new Error('Failed to get access Token.');
                                ask.close();
                            });
                        });
                    });
                });
            });
        }
        else if (msg.toLowerCase().startsWith('so')) {
            let client_id;
            ask.question('Client ID : ', async (id) => {
                client_id = id;
                if (!client_id) {
                    console.log("You didn't provided Client ID. Try again");
                    ask.close();
                    return;
                }
                if (!fs_1.default.existsSync('.data'))
                    fs_1.default.mkdirSync('.data');
                console.log('Checking Client ID...................');
                if (await SoundCloud_2.check_id(client_id)) {
                    console.log('Congratulations! Client ID is correct');
                    fs_1.default.writeFileSync('.data/soundcloud.data', JSON.stringify({ client_id }, undefined, 4));
                }
                else
                    console.log('Client ID is incorrect. Try to run this again with correct client ID.');
                ask.close();
            });
        }
        else {
            console.log('Invalid Option, Please Try again');
            ask.close();
        }
    });
}
exports.authorization = authorization;
//# sourceMappingURL=index.js.map