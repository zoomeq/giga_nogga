{"version":3,"file":"classes.js","sourceRoot":"","sources":["../../play-dl/Spotify/classes.ts"],"names":[],"mappings":";;;AAAA,sDAAmD;AA6BnD,MAAa,YAAY;IAWrB,YAAY,IAAS;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;QACrC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC;QAC1D,MAAM,OAAO,GAAqB,EAAE,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE;YAC5B,OAAO,CAAC,IAAI,CAAC;gBACT,IAAI,EAAE,CAAC,CAAC,IAAI;gBACZ,EAAE,EAAE,CAAC,CAAC,EAAE;gBACR,GAAG,EAAE,CAAC,CAAC,aAAa,CAAC,OAAO;aAC/B,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG;YACT,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO;YAC/B,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;YACjB,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;YACrC,sBAAsB,EAAE,IAAI,CAAC,KAAK,CAAC,sBAAsB;YACzD,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;SACxC,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,MAAM;QACF,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC5B,CAAC;IACN,CAAC;CACJ;AArDD,oCAqDC;AAED,MAAa,eAAe;IAYxB,YAAY,IAAS,EAAE,WAA+B;QAClD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACxC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG;YACT,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;YAC7B,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO;YACrC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;SACpB,CAAC;QACF,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC7C,MAAM,MAAM,GAAmB,EAAE,CAAC;QAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE;YACjC,MAAM,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,KAAK;QACP,IAAI,QAAgB,CAAC;QACrB,IAAI,IAAI,CAAC,WAAW,GAAG,IAAI;YAAE,QAAQ,GAAG,IAAI,CAAC;;YACxC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;QACjC,IAAI,QAAQ,IAAI,GAAG;YAAE,OAAO;QAC5B,MAAM,IAAI,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACjD,IAAI,CAAC,IAAI,CACL,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;gBAClC,MAAM,QAAQ,GAAG,MAAM,iBAAO,CAC1B,wCAAwC,IAAI,CAAC,EAAE,kBAC3C,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GACd,qBAAqB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAC9C;oBACI,OAAO,EAAE;wBACL,aAAa,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE;qBACnF;iBACJ,CACJ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,sBAAsB,GAAG,EAAE,CAAC,CAAC,CAAC;gBACtD,MAAM,MAAM,GAAmB,EAAE,CAAC;gBAClC,IAAI,OAAO,QAAQ,KAAK,QAAQ;oBAAE,OAAO;gBACzC,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACvC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE;oBAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC3C,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;gBACxC,OAAO,CAAC,SAAS,CAAC,CAAC;YACvB,CAAC,CAAC,CACL,CAAC;SACL;QACD,MAAM,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAI,CAAC,GAAW;QACZ,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACzD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;QACxF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;IAC7C,CAAC;IAED,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;IACpC,CAAC;IAED,IAAI,YAAY;QACZ,MAAM,WAAW,GAAW,IAAI,CAAC,WAAW,CAAC;QAC7C,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,GAAG,GAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,WAAW,EAAE,CAAoB,CAAC,MAAM,CAAC;IAC1G,CAAC;IAED,MAAM;QACF,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,KAAK,EAAE,IAAI,CAAC,KAAK;SACpB,CAAC;IACN,CAAC;CACJ;AAhGD,0CAgGC;AAED,MAAa,YAAY;IAarB,YAAY,IAAS,EAAE,WAA+B;QAClD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAClB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,OAAO,GAAqB,EAAE,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE;YAC5B,OAAO,CAAC,IAAI,CAAC;gBACT,IAAI,EAAE,CAAC,CAAC,IAAI;gBACZ,EAAE,EAAE,CAAC,CAAC,EAAE;gBACR,GAAG,EAAE,CAAC,CAAC,aAAa,CAAC,OAAO;aAC/B,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;QACtC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC;QAC1D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC;QACpC,MAAM,MAAM,GAAoB,EAAE,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE;YACjC,MAAM,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QACrC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,KAAK;QACP,IAAI,QAAgB,CAAC;QACrB,IAAI,IAAI,CAAC,UAAU,GAAG,GAAG;YAAE,QAAQ,GAAG,GAAG,CAAC;;YACrC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC;QAChC,IAAI,QAAQ,IAAI,EAAE;YAAE,OAAO;QAC3B,MAAM,IAAI,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;YAChD,IAAI,CAAC,IAAI,CACL,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;gBAClC,MAAM,QAAQ,GAAG,MAAM,iBAAO,CAC1B,qCAAqC,IAAI,CAAC,EAAE,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,oBACtE,IAAI,CAAC,WAAW,CAAC,MACrB,EAAE,EACF;oBACI,OAAO,EAAE;wBACL,aAAa,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE;qBACnF;iBACJ,CACJ,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,sBAAsB,GAAG,EAAE,CAAC,CAAC,CAAC;gBACtD,MAAM,MAAM,GAAoB,EAAE,CAAC;gBACnC,IAAI,OAAO,QAAQ,KAAK,QAAQ;oBAAE,OAAO;gBACzC,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACvC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE;oBAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtC,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;gBACxC,OAAO,CAAC,SAAS,CAAC,CAAC;YACvB,CAAC,CAAC,CACL,CAAC;SACL;QACD,MAAM,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,IAAI,CAAC,GAAW;QACZ,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACzD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;QACxF,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;IAC7C,CAAC;IAED,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;IACpC,CAAC;IAED,IAAI,YAAY;QACZ,MAAM,WAAW,GAAW,IAAI,CAAC,WAAW,CAAC;QAC7C,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,GAAG,GAAG,GAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,WAAW,EAAE,CAAoB,CAAC,MAAM,CAAC;IAC1G,CAAC;IAED,MAAM;QACF,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;YACnD,YAAY,EAAE,IAAI,CAAC,YAAY;SAClC,CAAC;IACN,CAAC;CACJ;AAvGD,oCAuGC;AAED,MAAM,aAAa;IASf,YAAY,IAAS;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;QACrC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC;QAC1D,MAAM,OAAO,GAAqB,EAAE,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAM,EAAE,EAAE;YAC5B,OAAO,CAAC,IAAI,CAAC;gBACT,IAAI,EAAE,CAAC,CAAC,IAAI;gBACZ,EAAE,EAAE,CAAC,CAAC,EAAE;gBACR,GAAG,EAAE,CAAC,CAAC,aAAa,CAAC,OAAO;aAC/B,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED,MAAM;QACF,OAAO;YACH,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,OAAO,EAAE,IAAI,CAAC,OAAO;SACxB,CAAC;IACN,CAAC;CACJ","sourcesContent":["import { request } from '../YouTube/utils/request';\r\nimport { SpotifyDataOptions } from '.';\r\n\r\ninterface SpotifyTrackAlbum {\r\n    name: string;\r\n    url: string;\r\n    id: string;\r\n    release_date: string;\r\n    release_date_precision: string;\r\n    total_tracks: number;\r\n}\r\n\r\ninterface SpotifyArtists {\r\n    name: string;\r\n    url: string;\r\n    id: string;\r\n}\r\n\r\ninterface SpotifyThumbnail {\r\n    height: number;\r\n    width: number;\r\n    url: string;\r\n}\r\n\r\ninterface SpotifyCopyright {\r\n    text: string;\r\n    type: string;\r\n}\r\n\r\nexport class SpotifyVideo {\r\n    name: string;\r\n    type: 'track' | 'playlist' | 'album';\r\n    id: string;\r\n    url: string;\r\n    explicit: boolean;\r\n    durationInSec: number;\r\n    durationInMs: number;\r\n    artists: SpotifyArtists[];\r\n    album: SpotifyTrackAlbum;\r\n    thumbnail: SpotifyThumbnail;\r\n    constructor(data: any) {\r\n        this.name = data.name;\r\n        this.id = data.id;\r\n        this.type = 'track';\r\n        this.url = data.external_urls.spotify;\r\n        this.explicit = data.explicit;\r\n        this.durationInMs = data.duration_ms;\r\n        this.durationInSec = Math.round(this.durationInMs / 1000);\r\n        const artists: SpotifyArtists[] = [];\r\n        data.artists.forEach((v: any) => {\r\n            artists.push({\r\n                name: v.name,\r\n                id: v.id,\r\n                url: v.external_urls.spotify\r\n            });\r\n        });\r\n        this.artists = artists;\r\n        this.album = {\r\n            name: data.album.name,\r\n            url: data.external_urls.spotify,\r\n            id: data.album.id,\r\n            release_date: data.album.release_date,\r\n            release_date_precision: data.album.release_date_precision,\r\n            total_tracks: data.album.total_tracks\r\n        };\r\n        this.thumbnail = data.album.images[0];\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            id: this.id,\r\n            type: this.type,\r\n            url: this.url,\r\n            explicit: this.explicit,\r\n            durationInMs: this.durationInMs,\r\n            durationInSec: this.durationInSec,\r\n            artists: this.artists,\r\n            album: this.album,\r\n            thumbnail: this.thumbnail\r\n        };\r\n    }\r\n}\r\n\r\nexport class SpotifyPlaylist {\r\n    name: string;\r\n    type: 'track' | 'playlist' | 'album';\r\n    collaborative: boolean;\r\n    description: string;\r\n    url: string;\r\n    id: string;\r\n    thumbnail: SpotifyThumbnail;\r\n    owner: SpotifyArtists;\r\n    tracksCount: number;\r\n    private spotifyData: SpotifyDataOptions;\r\n    private fetched_tracks: Map<string, SpotifyVideo[]>;\r\n    constructor(data: any, spotifyData: SpotifyDataOptions) {\r\n        this.name = data.name;\r\n        this.type = 'playlist';\r\n        this.collaborative = data.collaborative;\r\n        this.description = data.description;\r\n        this.url = data.external_urls.spotify;\r\n        this.id = data.id;\r\n        this.thumbnail = data.images[0];\r\n        this.owner = {\r\n            name: data.owner.display_name,\r\n            url: data.owner.external_urls.spotify,\r\n            id: data.owner.id\r\n        };\r\n        this.tracksCount = Number(data.tracks.total);\r\n        const videos: SpotifyVideo[] = [];\r\n        data.tracks.items.forEach((v: any) => {\r\n            videos.push(new SpotifyVideo(v.track));\r\n        });\r\n        this.fetched_tracks = new Map();\r\n        this.fetched_tracks.set('1', videos);\r\n        this.spotifyData = spotifyData;\r\n    }\r\n\r\n    async fetch() {\r\n        let fetching: number;\r\n        if (this.tracksCount > 1000) fetching = 1000;\r\n        else fetching = this.tracksCount;\r\n        if (fetching <= 100) return;\r\n        const work = [];\r\n        for (let i = 2; i <= Math.ceil(fetching / 100); i++) {\r\n            work.push(\r\n                new Promise(async (resolve, reject) => {\r\n                    const response = await request(\r\n                        `https://api.spotify.com/v1/playlists/${this.id}/tracks?offset=${\r\n                            (i - 1) * 100\r\n                        }&limit=100&market=${this.spotifyData.market}`,\r\n                        {\r\n                            headers: {\r\n                                Authorization: `${this.spotifyData.token_type} ${this.spotifyData.access_token}`\r\n                            }\r\n                        }\r\n                    ).catch((err) => reject(`Response Error : \\n${err}`));\r\n                    const videos: SpotifyVideo[] = [];\r\n                    if (typeof response !== 'string') return;\r\n                    const json_data = JSON.parse(response);\r\n                    json_data.items.forEach((v: any) => {\r\n                        videos.push(new SpotifyVideo(v.track));\r\n                    });\r\n                    this.fetched_tracks.set(`${i}`, videos);\r\n                    resolve('Success');\r\n                })\r\n            );\r\n        }\r\n        await Promise.allSettled(work);\r\n        return this;\r\n    }\r\n\r\n    page(num: number) {\r\n        if (!num) throw new Error('Page number is not provided');\r\n        if (!this.fetched_tracks.has(`${num}`)) throw new Error('Given Page number is invalid');\r\n        return this.fetched_tracks.get(`${num}`);\r\n    }\r\n\r\n    get total_pages() {\r\n        return this.fetched_tracks.size;\r\n    }\r\n\r\n    get total_tracks() {\r\n        const page_number: number = this.total_pages;\r\n        return (page_number - 1) * 100 + (this.fetched_tracks.get(`${page_number}`) as SpotifyVideo[]).length;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            type: this.type,\r\n            collaborative: this.collaborative,\r\n            description: this.description,\r\n            url: this.url,\r\n            id: this.id,\r\n            thumbnail: this.thumbnail,\r\n            owner: this.owner\r\n        };\r\n    }\r\n}\r\n\r\nexport class SpotifyAlbum {\r\n    name: string;\r\n    type: 'track' | 'playlist' | 'album';\r\n    url: string;\r\n    id: string;\r\n    thumbnail: SpotifyThumbnail;\r\n    artists: SpotifyArtists[];\r\n    copyrights: SpotifyCopyright[];\r\n    release_date: string;\r\n    release_date_precision: string;\r\n    trackCount: number;\r\n    private spotifyData: SpotifyDataOptions;\r\n    private fetched_tracks: Map<string, SpotifyTracks[]>;\r\n    constructor(data: any, spotifyData: SpotifyDataOptions) {\r\n        this.name = data.name;\r\n        this.type = 'album';\r\n        this.id = data.id;\r\n        this.url = data.external_urls.spotify;\r\n        this.thumbnail = data.images[0];\r\n        const artists: SpotifyArtists[] = [];\r\n        data.artists.forEach((v: any) => {\r\n            artists.push({\r\n                name: v.name,\r\n                id: v.id,\r\n                url: v.external_urls.spotify\r\n            });\r\n        });\r\n        this.artists = artists;\r\n        this.copyrights = data.copyrights;\r\n        this.release_date = data.release_date;\r\n        this.release_date_precision = data.release_date_precision;\r\n        this.trackCount = data.total_tracks;\r\n        const videos: SpotifyTracks[] = [];\r\n        data.tracks.items.forEach((v: any) => {\r\n            videos.push(new SpotifyTracks(v));\r\n        });\r\n        this.fetched_tracks = new Map();\r\n        this.fetched_tracks.set('1', videos);\r\n        this.spotifyData = spotifyData;\r\n    }\r\n\r\n    async fetch() {\r\n        let fetching: number;\r\n        if (this.trackCount > 500) fetching = 500;\r\n        else fetching = this.trackCount;\r\n        if (fetching <= 50) return;\r\n        const work = [];\r\n        for (let i = 2; i <= Math.ceil(fetching / 50); i++) {\r\n            work.push(\r\n                new Promise(async (resolve, reject) => {\r\n                    const response = await request(\r\n                        `https://api.spotify.com/v1/albums/${this.id}/tracks?offset=${(i - 1) * 50}&limit=50&market=${\r\n                            this.spotifyData.market\r\n                        }`,\r\n                        {\r\n                            headers: {\r\n                                Authorization: `${this.spotifyData.token_type} ${this.spotifyData.access_token}`\r\n                            }\r\n                        }\r\n                    ).catch((err) => reject(`Response Error : \\n${err}`));\r\n                    const videos: SpotifyTracks[] = [];\r\n                    if (typeof response !== 'string') return;\r\n                    const json_data = JSON.parse(response);\r\n                    json_data.items.forEach((v: any) => {\r\n                        videos.push(new SpotifyTracks(v));\r\n                    });\r\n                    this.fetched_tracks.set(`${i}`, videos);\r\n                    resolve('Success');\r\n                })\r\n            );\r\n        }\r\n        await Promise.allSettled(work);\r\n        return this;\r\n    }\r\n\r\n    page(num: number) {\r\n        if (!num) throw new Error('Page number is not provided');\r\n        if (!this.fetched_tracks.has(`${num}`)) throw new Error('Given Page number is invalid');\r\n        return this.fetched_tracks.get(`${num}`);\r\n    }\r\n\r\n    get total_pages() {\r\n        return this.fetched_tracks.size;\r\n    }\r\n\r\n    get total_tracks() {\r\n        const page_number: number = this.total_pages;\r\n        return (page_number - 1) * 100 + (this.fetched_tracks.get(`${page_number}`) as SpotifyVideo[]).length;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            type: this.type,\r\n            url: this.url,\r\n            thumbnail: this.thumbnail,\r\n            artists: this.artists,\r\n            copyrights: this.copyrights,\r\n            release_date: this.release_date,\r\n            release_date_precision: this.release_date_precision,\r\n            total_tracks: this.total_tracks\r\n        };\r\n    }\r\n}\r\n\r\nclass SpotifyTracks {\r\n    name: string;\r\n    type: 'track' | 'playlist' | 'album';\r\n    id: string;\r\n    url: string;\r\n    explicit: boolean;\r\n    durationInSec: number;\r\n    durationInMs: number;\r\n    artists: SpotifyArtists[];\r\n    constructor(data: any) {\r\n        this.name = data.name;\r\n        this.id = data.id;\r\n        this.type = 'track';\r\n        this.url = data.external_urls.spotify;\r\n        this.explicit = data.explicit;\r\n        this.durationInMs = data.duration_ms;\r\n        this.durationInSec = Math.round(this.durationInMs / 1000);\r\n        const artists: SpotifyArtists[] = [];\r\n        data.artists.forEach((v: any) => {\r\n            artists.push({\r\n                name: v.name,\r\n                id: v.id,\r\n                url: v.external_urls.spotify\r\n            });\r\n        });\r\n        this.artists = artists;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            id: this.id,\r\n            type: this.type,\r\n            url: this.url,\r\n            explicit: this.explicit,\r\n            durationInMs: this.durationInMs,\r\n            durationInSec: this.durationInSec,\r\n            artists: this.artists\r\n        };\r\n    }\r\n}\r\n"]}