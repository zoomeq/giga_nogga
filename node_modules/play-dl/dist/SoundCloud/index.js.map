{"version":3,"file":"index.js","sourceRoot":"","sources":["../../play-dl/SoundCloud/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\r\nimport { StreamType } from '../YouTube/stream';\r\nimport { request } from '../YouTube/utils/request';\r\nimport { SoundCloudPlaylist, SoundCloudTrack, SoundCloudTrackFormat, Stream } from './classes';\r\n\r\nlet soundData: SoundDataOptions;\r\nif (fs.existsSync('.data/soundcloud.data')) {\r\n    soundData = JSON.parse(fs.readFileSync('.data/soundcloud.data').toString());\r\n}\r\n\r\ninterface SoundDataOptions {\r\n    client_id: string;\r\n}\r\n\r\nconst pattern = /^(?:(https?):\\/\\/)?(?:(?:www|m)\\.)?(soundcloud\\.com|snd\\.sc)\\/(.*)$/;\r\n\r\nexport async function soundcloud(url: string): Promise<SoundCloudTrack | SoundCloudPlaylist> {\r\n    if (!soundData) throw new Error('SoundCloud Data is missing\\nDid you forgot to do authorization ?');\r\n    if (!url.match(pattern)) throw new Error('This is not a SoundCloud URL');\r\n\r\n    const data = await request(\r\n        `https://api-v2.soundcloud.com/resolve?url=${url}&client_id=${soundData.client_id}`\r\n    ).catch((err: Error) => err);\r\n\r\n    if (data instanceof Error) throw data;\r\n\r\n    const json_data = JSON.parse(data);\r\n\r\n    if (json_data.kind !== 'track' && json_data.kind !== 'playlist')\r\n        throw new Error('This url is out of scope for play-dl.');\r\n\r\n    if (json_data.kind === 'track') return new SoundCloudTrack(json_data);\r\n    else return new SoundCloudPlaylist(json_data, soundData.client_id);\r\n}\r\n\r\nexport async function so_search(\r\n    query: string,\r\n    type: 'tracks' | 'playlists' | 'albums',\r\n    limit: number = 10\r\n): Promise<(SoundCloudPlaylist | SoundCloudTrack)[]> {\r\n    const response = await request(\r\n        `https://api-v2.soundcloud.com/search/${type}?q=${query}&client_id=${soundData.client_id}&limit=${limit}`\r\n    );\r\n    const results: (SoundCloudPlaylist | SoundCloudTrack)[] = [];\r\n    const json_data = JSON.parse(response);\r\n    json_data.collection.forEach((x: any) => {\r\n        if (type === 'tracks') results.push(new SoundCloudTrack(x));\r\n        else results.push(new SoundCloudPlaylist(x, soundData.client_id));\r\n    });\r\n    return results;\r\n}\r\n\r\nexport async function stream(url: string, quality?: number): Promise<Stream> {\r\n    const data = await soundcloud(url);\r\n\r\n    if (data instanceof SoundCloudPlaylist) throw new Error(\"Streams can't be created from Playlist url\");\r\n\r\n    const HLSformats = parseHlsFormats(data.formats);\r\n    if (typeof quality !== 'number') quality = HLSformats.length - 1;\r\n    else if (quality <= 0) quality = 0;\r\n    else if (quality >= HLSformats.length) quality = HLSformats.length - 1;\r\n    const req_url = HLSformats[quality].url + '?client_id=' + soundData.client_id;\r\n    const s_data = JSON.parse(await request(req_url));\r\n    const type = HLSformats[quality].format.mime_type.startsWith('audio/ogg')\r\n        ? StreamType.OggOpus\r\n        : StreamType.Arbitrary;\r\n    return new Stream(s_data.url, type);\r\n}\r\n\r\nexport async function stream_from_info(data: SoundCloudTrack, quality?: number): Promise<Stream> {\r\n    const HLSformats = parseHlsFormats(data.formats);\r\n    if (typeof quality !== 'number') quality = HLSformats.length - 1;\r\n    else if (quality <= 0) quality = 0;\r\n    else if (quality >= HLSformats.length) quality = HLSformats.length - 1;\r\n    const req_url = HLSformats[quality].url + '?client_id=' + soundData.client_id;\r\n    const s_data = JSON.parse(await request(req_url));\r\n    const type = HLSformats[quality].format.mime_type.startsWith('audio/ogg')\r\n        ? StreamType.OggOpus\r\n        : StreamType.Arbitrary;\r\n    return new Stream(s_data.url, type);\r\n}\r\n\r\nexport async function check_id(id: string): Promise<boolean> {\r\n    const response = await request(`https://api-v2.soundcloud.com/search?client_id=${id}&q=Rick+Roll&limit=0`).catch(\r\n        (err: Error) => {\r\n            return err;\r\n        }\r\n    );\r\n    if (response instanceof Error) return false;\r\n    else return true;\r\n}\r\n\r\nexport async function so_validate(url: string): Promise<false | 'track' | 'playlist'> {\r\n    const data = await request(\r\n        `https://api-v2.soundcloud.com/resolve?url=${url}&client_id=${soundData.client_id}`\r\n    ).catch((err: Error) => err);\r\n\r\n    if (data instanceof Error) throw data;\r\n\r\n    const json_data = JSON.parse(data);\r\n    if (json_data.kind === 'track') return 'track';\r\n    else if (json_data.kind === 'playlist') return 'playlist';\r\n    else return false;\r\n}\r\n\r\nfunction parseHlsFormats(data: SoundCloudTrackFormat[]) {\r\n    const result: SoundCloudTrackFormat[] = [];\r\n    data.forEach((format) => {\r\n        if (format.format.protocol === 'hls') result.push(format);\r\n    });\r\n    return result;\r\n}\r\n"]}