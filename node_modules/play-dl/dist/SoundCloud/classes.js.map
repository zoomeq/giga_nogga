{"version":3,"file":"classes.js","sourceRoot":"","sources":["../../play-dl/SoundCloud/classes.ts"],"names":[],"mappings":"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","sourcesContent":["import { request, request_stream } from '../YouTube/utils/request';\r\nimport { PassThrough } from 'stream';\r\nimport { IncomingMessage } from 'http';\r\nimport { StreamType } from '../YouTube/stream';\r\n\r\ninterface SoundCloudUser {\r\n    name: string;\r\n    id: string;\r\n    url: string;\r\n    type: 'track' | 'playlist' | 'user';\r\n    verified: boolean;\r\n    description: string;\r\n    first_name: string;\r\n    full_name: string;\r\n    last_name: string;\r\n    thumbnail: string;\r\n}\r\n\r\ninterface SoundCloudTrackDeprecated {\r\n    fetched: boolean;\r\n    id: number;\r\n    type: 'track';\r\n}\r\n\r\nexport interface SoundCloudTrackFormat {\r\n    url: string;\r\n    preset: string;\r\n    duration: number;\r\n    format: {\r\n        protocol: string;\r\n        mime_type: string;\r\n    };\r\n    quality: string;\r\n}\r\n\r\nexport class SoundCloudTrack {\r\n    name: string;\r\n    id: number;\r\n    url: string;\r\n    fetched: boolean;\r\n    type: 'track' | 'playlist' | 'user';\r\n    durationInSec: number;\r\n    durationInMs: number;\r\n    formats: SoundCloudTrackFormat[];\r\n    publisher: {\r\n        name: string;\r\n        id: number;\r\n        artist: string;\r\n        contains_music: boolean;\r\n        writer_composer: string;\r\n    } | null;\r\n    thumbnail: string;\r\n    user: SoundCloudUser;\r\n    constructor(data: any) {\r\n        this.name = data.title;\r\n        this.id = data.id;\r\n        this.url = data.uri;\r\n        this.fetched = true;\r\n        this.type = 'track';\r\n        this.durationInSec = Number(data.duration) / 1000;\r\n        this.durationInMs = Number(data.duration);\r\n        if (data.publisher_metadata)\r\n            this.publisher = {\r\n                name: data.publisher_metadata.publisher,\r\n                id: data.publisher_metadata.id,\r\n                artist: data.publisher_metadata.artist,\r\n                contains_music: Boolean(data.publisher_metadata.contains_music) || false,\r\n                writer_composer: data.publisher_metadata.writer_composer\r\n            };\r\n        else this.publisher = null;\r\n        this.formats = data.media.transcodings;\r\n        this.user = {\r\n            name: data.user.username,\r\n            id: data.user.id,\r\n            type: 'user',\r\n            url: data.user.permalink_url,\r\n            verified: Boolean(data.user.verified) || false,\r\n            description: data.user.description,\r\n            first_name: data.user.first_name,\r\n            full_name: data.user.full_name,\r\n            last_name: data.user.last_name,\r\n            thumbnail: data.user.avatar_url\r\n        };\r\n        this.thumbnail = data.artwork_url;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            id: this.id,\r\n            type: this.type,\r\n            url: this.url,\r\n            fetched: this.fetched,\r\n            durationInMs: this.durationInMs,\r\n            durationInSec: this.durationInSec,\r\n            publisher: this.publisher,\r\n            formats: this.formats,\r\n            thumbnail: this.thumbnail,\r\n            user: this.user\r\n        };\r\n    }\r\n}\r\n\r\nexport class SoundCloudPlaylist {\r\n    name: string;\r\n    id: number;\r\n    url: string;\r\n    type: 'track' | 'playlist' | 'user';\r\n    sub_type: string;\r\n    durationInSec: number;\r\n    durationInMs: number;\r\n    client_id: string;\r\n    user: SoundCloudUser;\r\n    tracks: SoundCloudTrack[] | SoundCloudTrackDeprecated[];\r\n    tracksCount: number;\r\n    constructor(data: any, client_id: string) {\r\n        this.name = data.title;\r\n        this.id = data.id;\r\n        this.url = data.uri;\r\n        this.client_id = client_id;\r\n        this.type = 'playlist';\r\n        this.sub_type = data.set_type;\r\n        this.durationInSec = Number(data.duration) / 1000;\r\n        this.durationInMs = Number(data.duration);\r\n        this.user = {\r\n            name: data.user.username,\r\n            id: data.user.id,\r\n            type: 'user',\r\n            url: data.user.permalink_url,\r\n            verified: Boolean(data.user.verified) || false,\r\n            description: data.user.description,\r\n            first_name: data.user.first_name,\r\n            full_name: data.user.full_name,\r\n            last_name: data.user.last_name,\r\n            thumbnail: data.user.avatar_url\r\n        };\r\n        this.tracksCount = data.track_count;\r\n        const tracks: any[] = [];\r\n        data.tracks.forEach((track: any) => {\r\n            if (track.title) {\r\n                tracks.push(new SoundCloudTrack(track));\r\n            } else\r\n                tracks.push({\r\n                    id: track.id,\r\n                    fetched: false,\r\n                    type: 'track'\r\n                });\r\n        });\r\n        this.tracks = tracks;\r\n    }\r\n\r\n    async fetch(): Promise<void> {\r\n        const work: any[] = [];\r\n        for (let i = 0; i < this.tracks.length; i++) {\r\n            if (!this.tracks[i].fetched) {\r\n                work.push(\r\n                    new Promise(async (resolve) => {\r\n                        const num = i;\r\n                        const data = await request(\r\n                            `https://api-v2.soundcloud.com/tracks/${this.tracks[i].id}?client_id=${this.client_id}`\r\n                        );\r\n\r\n                        this.tracks[num] = new SoundCloudTrack(JSON.parse(data));\r\n                        resolve('');\r\n                    })\r\n                );\r\n            }\r\n        }\r\n        await Promise.allSettled(work);\r\n    }\r\n\r\n    get total_tracks() {\r\n        let count = 0;\r\n        this.tracks.forEach((track) => {\r\n            if (track instanceof SoundCloudTrack) count++;\r\n            else return;\r\n        });\r\n        return count;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            id: this.id,\r\n            type: this.type,\r\n            sub_type: this.sub_type,\r\n            url: this.url,\r\n            durationInMs: this.durationInMs,\r\n            durationInSec: this.durationInSec,\r\n            tracksCount: this.tracksCount,\r\n            user: this.user,\r\n            tracks: this.tracks\r\n        };\r\n    }\r\n}\r\n\r\nexport class Stream {\r\n    stream: PassThrough;\r\n    type: StreamType;\r\n    private url: string;\r\n    private playing_count: number;\r\n    private downloaded_time: number;\r\n    private downloaded_segments: number;\r\n    private request: IncomingMessage | null;\r\n    private data_ended: boolean;\r\n    private time: number[];\r\n    private segment_urls: string[];\r\n    constructor(url: string, type: StreamType = StreamType.Arbitrary) {\r\n        this.stream = new PassThrough({ highWaterMark: 10 * 1000 * 1000 });\r\n        this.type = type;\r\n        this.url = url;\r\n        this.playing_count = 0;\r\n        this.downloaded_time = 0;\r\n        this.request = null;\r\n        this.downloaded_segments = 0;\r\n        this.data_ended = false;\r\n        this.time = [];\r\n        this.segment_urls = [];\r\n        this.stream.on('close', () => {\r\n            this.cleanup();\r\n        });\r\n        this.stream.on('pause', () => {\r\n            this.playing_count++;\r\n            if (this.data_ended) {\r\n                this.cleanup();\r\n                this.stream.removeAllListeners('pause');\r\n            } else if (this.playing_count === 110) {\r\n                this.playing_count = 0;\r\n                this.start();\r\n            }\r\n        });\r\n        this.start();\r\n    }\r\n\r\n    private async parser() {\r\n        const response = await request(this.url).catch((err: Error) => {\r\n            return err;\r\n        });\r\n        if (response instanceof Error) throw response;\r\n        const array = response.split('\\n');\r\n        array.forEach((val) => {\r\n            if (val.startsWith('#EXTINF:')) {\r\n                this.time.push(parseFloat(val.replace('#EXTINF:', '')));\r\n            } else if (val.startsWith('https')) {\r\n                this.segment_urls.push(val);\r\n            }\r\n        });\r\n        return;\r\n    }\r\n\r\n    private async start() {\r\n        if (this.stream.destroyed) {\r\n            this.cleanup();\r\n            return;\r\n        }\r\n        this.time = [];\r\n        this.segment_urls = [];\r\n        await this.parser();\r\n        this.downloaded_time = 0;\r\n        this.segment_urls.splice(0, this.downloaded_segments);\r\n        this.loop();\r\n    }\r\n\r\n    private async loop() {\r\n        if (this.stream.destroyed) {\r\n            this.cleanup();\r\n            return;\r\n        }\r\n        if (this.time.length === 0 || this.segment_urls.length === 0) {\r\n            this.data_ended = true;\r\n            return;\r\n        }\r\n        this.downloaded_time += this.time.shift() as number;\r\n        this.downloaded_segments++;\r\n        const stream = await request_stream(this.segment_urls.shift() as string).catch((err: Error) => err);\r\n        if (stream instanceof Error) throw stream;\r\n\r\n        stream.pipe(this.stream, { end: false });\r\n        stream.on('end', () => {\r\n            if (this.downloaded_time >= 300) return;\r\n            else this.loop();\r\n        });\r\n        stream.once('error', (err) => {\r\n            this.stream.emit('error', err);\r\n        });\r\n    }\r\n\r\n    private cleanup() {\r\n        this.request?.unpipe(this.stream);\r\n        this.request?.destroy();\r\n        this.url = '';\r\n        this.playing_count = 0;\r\n        this.downloaded_time = 0;\r\n        this.downloaded_segments = 0;\r\n        this.request = null;\r\n        this.time = [];\r\n        this.segment_urls = [];\r\n    }\r\n}\r\n"]}