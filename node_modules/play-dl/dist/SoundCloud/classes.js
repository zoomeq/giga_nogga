"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stream = exports.SoundCloudPlaylist = exports.SoundCloudTrack = void 0;
const request_1 = require("../YouTube/utils/request");
const stream_1 = require("stream");
const stream_2 = require("../YouTube/stream");
class SoundCloudTrack {
    constructor(data) {
        this.name = data.title;
        this.id = data.id;
        this.url = data.uri;
        this.fetched = true;
        this.type = 'track';
        this.durationInSec = Number(data.duration) / 1000;
        this.durationInMs = Number(data.duration);
        if (data.publisher_metadata)
            this.publisher = {
                name: data.publisher_metadata.publisher,
                id: data.publisher_metadata.id,
                artist: data.publisher_metadata.artist,
                contains_music: Boolean(data.publisher_metadata.contains_music) || false,
                writer_composer: data.publisher_metadata.writer_composer
            };
        else
            this.publisher = null;
        this.formats = data.media.transcodings;
        this.user = {
            name: data.user.username,
            id: data.user.id,
            type: 'user',
            url: data.user.permalink_url,
            verified: Boolean(data.user.verified) || false,
            description: data.user.description,
            first_name: data.user.first_name,
            full_name: data.user.full_name,
            last_name: data.user.last_name,
            thumbnail: data.user.avatar_url
        };
        this.thumbnail = data.artwork_url;
    }
    toJSON() {
        return {
            name: this.name,
            id: this.id,
            type: this.type,
            url: this.url,
            fetched: this.fetched,
            durationInMs: this.durationInMs,
            durationInSec: this.durationInSec,
            publisher: this.publisher,
            formats: this.formats,
            thumbnail: this.thumbnail,
            user: this.user
        };
    }
}
exports.SoundCloudTrack = SoundCloudTrack;
class SoundCloudPlaylist {
    constructor(data, client_id) {
        this.name = data.title;
        this.id = data.id;
        this.url = data.uri;
        this.client_id = client_id;
        this.type = 'playlist';
        this.sub_type = data.set_type;
        this.durationInSec = Number(data.duration) / 1000;
        this.durationInMs = Number(data.duration);
        this.user = {
            name: data.user.username,
            id: data.user.id,
            type: 'user',
            url: data.user.permalink_url,
            verified: Boolean(data.user.verified) || false,
            description: data.user.description,
            first_name: data.user.first_name,
            full_name: data.user.full_name,
            last_name: data.user.last_name,
            thumbnail: data.user.avatar_url
        };
        this.tracksCount = data.track_count;
        const tracks = [];
        data.tracks.forEach((track) => {
            if (track.title) {
                tracks.push(new SoundCloudTrack(track));
            }
            else
                tracks.push({
                    id: track.id,
                    fetched: false,
                    type: 'track'
                });
        });
        this.tracks = tracks;
    }
    async fetch() {
        const work = [];
        for (let i = 0; i < this.tracks.length; i++) {
            if (!this.tracks[i].fetched) {
                work.push(new Promise(async (resolve) => {
                    const num = i;
                    const data = await request_1.request(`https://api-v2.soundcloud.com/tracks/${this.tracks[i].id}?client_id=${this.client_id}`);
                    this.tracks[num] = new SoundCloudTrack(JSON.parse(data));
                    resolve('');
                }));
            }
        }
        await Promise.allSettled(work);
    }
    get total_tracks() {
        let count = 0;
        this.tracks.forEach((track) => {
            if (track instanceof SoundCloudTrack)
                count++;
            else
                return;
        });
        return count;
    }
    toJSON() {
        return {
            name: this.name,
            id: this.id,
            type: this.type,
            sub_type: this.sub_type,
            url: this.url,
            durationInMs: this.durationInMs,
            durationInSec: this.durationInSec,
            tracksCount: this.tracksCount,
            user: this.user,
            tracks: this.tracks
        };
    }
}
exports.SoundCloudPlaylist = SoundCloudPlaylist;
class Stream {
    constructor(url, type = stream_2.StreamType.Arbitrary) {
        this.stream = new stream_1.PassThrough({ highWaterMark: 10 * 1000 * 1000 });
        this.type = type;
        this.url = url;
        this.playing_count = 0;
        this.downloaded_time = 0;
        this.request = null;
        this.downloaded_segments = 0;
        this.data_ended = false;
        this.time = [];
        this.segment_urls = [];
        this.stream.on('close', () => {
            this.cleanup();
        });
        this.stream.on('pause', () => {
            this.playing_count++;
            if (this.data_ended) {
                this.cleanup();
                this.stream.removeAllListeners('pause');
            }
            else if (this.playing_count === 110) {
                this.playing_count = 0;
                this.start();
            }
        });
        this.start();
    }
    async parser() {
        const response = await request_1.request(this.url).catch((err) => {
            return err;
        });
        if (response instanceof Error)
            throw response;
        const array = response.split('\n');
        array.forEach((val) => {
            if (val.startsWith('#EXTINF:')) {
                this.time.push(parseFloat(val.replace('#EXTINF:', '')));
            }
            else if (val.startsWith('https')) {
                this.segment_urls.push(val);
            }
        });
        return;
    }
    async start() {
        if (this.stream.destroyed) {
            this.cleanup();
            return;
        }
        this.time = [];
        this.segment_urls = [];
        await this.parser();
        this.downloaded_time = 0;
        this.segment_urls.splice(0, this.downloaded_segments);
        this.loop();
    }
    async loop() {
        if (this.stream.destroyed) {
            this.cleanup();
            return;
        }
        if (this.time.length === 0 || this.segment_urls.length === 0) {
            this.data_ended = true;
            return;
        }
        this.downloaded_time += this.time.shift();
        this.downloaded_segments++;
        const stream = await request_1.request_stream(this.segment_urls.shift()).catch((err) => err);
        if (stream instanceof Error)
            throw stream;
        stream.pipe(this.stream, { end: false });
        stream.on('end', () => {
            if (this.downloaded_time >= 300)
                return;
            else
                this.loop();
        });
        stream.once('error', (err) => {
            this.stream.emit('error', err);
        });
    }
    cleanup() {
        var _a, _b;
        (_a = this.request) === null || _a === void 0 ? void 0 : _a.unpipe(this.stream);
        (_b = this.request) === null || _b === void 0 ? void 0 : _b.destroy();
        this.url = '';
        this.playing_count = 0;
        this.downloaded_time = 0;
        this.downloaded_segments = 0;
        this.request = null;
        this.time = [];
        this.segment_urls = [];
    }
}
exports.Stream = Stream;
//# sourceMappingURL=classes.js.map