"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.so_validate = exports.check_id = exports.stream_from_info = exports.stream = exports.so_search = exports.soundcloud = void 0;
const fs_1 = __importDefault(require("fs"));
const stream_1 = require("../YouTube/stream");
const request_1 = require("../YouTube/utils/request");
const classes_1 = require("./classes");
let soundData;
if (fs_1.default.existsSync('.data/soundcloud.data')) {
    soundData = JSON.parse(fs_1.default.readFileSync('.data/soundcloud.data').toString());
}
const pattern = /^(?:(https?):\/\/)?(?:(?:www|m)\.)?(soundcloud\.com|snd\.sc)\/(.*)$/;
async function soundcloud(url) {
    if (!soundData)
        throw new Error('SoundCloud Data is missing\nDid you forgot to do authorization ?');
    if (!url.match(pattern))
        throw new Error('This is not a SoundCloud URL');
    const data = await request_1.request(`https://api-v2.soundcloud.com/resolve?url=${url}&client_id=${soundData.client_id}`).catch((err) => err);
    if (data instanceof Error)
        throw data;
    const json_data = JSON.parse(data);
    if (json_data.kind !== 'track' && json_data.kind !== 'playlist')
        throw new Error('This url is out of scope for play-dl.');
    if (json_data.kind === 'track')
        return new classes_1.SoundCloudTrack(json_data);
    else
        return new classes_1.SoundCloudPlaylist(json_data, soundData.client_id);
}
exports.soundcloud = soundcloud;
async function so_search(query, type, limit = 10) {
    const response = await request_1.request(`https://api-v2.soundcloud.com/search/${type}?q=${query}&client_id=${soundData.client_id}&limit=${limit}`);
    const results = [];
    const json_data = JSON.parse(response);
    json_data.collection.forEach((x) => {
        if (type === 'tracks')
            results.push(new classes_1.SoundCloudTrack(x));
        else
            results.push(new classes_1.SoundCloudPlaylist(x, soundData.client_id));
    });
    return results;
}
exports.so_search = so_search;
async function stream(url, quality) {
    const data = await soundcloud(url);
    if (data instanceof classes_1.SoundCloudPlaylist)
        throw new Error("Streams can't be created from Playlist url");
    const HLSformats = parseHlsFormats(data.formats);
    if (typeof quality !== 'number')
        quality = HLSformats.length - 1;
    else if (quality <= 0)
        quality = 0;
    else if (quality >= HLSformats.length)
        quality = HLSformats.length - 1;
    const req_url = HLSformats[quality].url + '?client_id=' + soundData.client_id;
    const s_data = JSON.parse(await request_1.request(req_url));
    const type = HLSformats[quality].format.mime_type.startsWith('audio/ogg')
        ? stream_1.StreamType.OggOpus
        : stream_1.StreamType.Arbitrary;
    return new classes_1.Stream(s_data.url, type);
}
exports.stream = stream;
async function stream_from_info(data, quality) {
    const HLSformats = parseHlsFormats(data.formats);
    if (typeof quality !== 'number')
        quality = HLSformats.length - 1;
    else if (quality <= 0)
        quality = 0;
    else if (quality >= HLSformats.length)
        quality = HLSformats.length - 1;
    const req_url = HLSformats[quality].url + '?client_id=' + soundData.client_id;
    const s_data = JSON.parse(await request_1.request(req_url));
    const type = HLSformats[quality].format.mime_type.startsWith('audio/ogg')
        ? stream_1.StreamType.OggOpus
        : stream_1.StreamType.Arbitrary;
    return new classes_1.Stream(s_data.url, type);
}
exports.stream_from_info = stream_from_info;
async function check_id(id) {
    const response = await request_1.request(`https://api-v2.soundcloud.com/search?client_id=${id}&q=Rick+Roll&limit=0`).catch((err) => {
        return err;
    });
    if (response instanceof Error)
        return false;
    else
        return true;
}
exports.check_id = check_id;
async function so_validate(url) {
    const data = await request_1.request(`https://api-v2.soundcloud.com/resolve?url=${url}&client_id=${soundData.client_id}`).catch((err) => err);
    if (data instanceof Error)
        throw data;
    const json_data = JSON.parse(data);
    if (json_data.kind === 'track')
        return 'track';
    else if (json_data.kind === 'playlist')
        return 'playlist';
    else
        return false;
}
exports.so_validate = so_validate;
function parseHlsFormats(data) {
    const result = [];
    data.forEach((format) => {
        if (format.format.protocol === 'hls')
            result.push(format);
    });
    return result;
}
//# sourceMappingURL=index.js.map