{"version":3,"file":"request.js","sourceRoot":"","sources":["../../../play-dl/YouTube/utils/request.ts"],"names":[],"mappings":"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","sourcesContent":["import https, { RequestOptions } from 'https';\r\nimport { IncomingMessage } from 'http';\r\nimport { URL } from 'url';\r\n\r\ninterface RequestOpts extends RequestOptions {\r\n    body?: string;\r\n    method?: 'GET' | 'POST';\r\n}\r\n\r\nfunction https_getter(req_url: string, options: RequestOpts = {}): Promise<IncomingMessage> {\r\n    return new Promise((resolve, reject) => {\r\n        const s = new URL(req_url);\r\n        options.method ??= 'GET';\r\n        const req_options: RequestOptions = {\r\n            host: s.hostname,\r\n            path: s.pathname + s.search,\r\n            headers: options.headers ?? {},\r\n            method: options.method\r\n        };\r\n\r\n        const req = https.request(req_options, resolve);\r\n        req.on('error', (err) => {\r\n            reject(err);\r\n        });\r\n        if (options.method === 'POST') req.write(options.body);\r\n        req.end();\r\n    });\r\n}\r\n\r\nexport async function request(url: string, options?: RequestOpts): Promise<string> {\r\n    return new Promise(async (resolve, reject) => {\r\n        let data = '';\r\n        let res = await https_getter(url, options).catch((err: Error) => err);\r\n        if (res instanceof Error) {\r\n            reject(res);\r\n            return;\r\n        }\r\n        if (Number(res.statusCode) >= 300 && Number(res.statusCode) < 400) {\r\n            res = await https_getter(res.headers.location as string, options);\r\n        } else if (Number(res.statusCode) > 400) {\r\n            reject(new Error(`Got ${res.statusCode} from the request`));\r\n        }\r\n        res.setEncoding('utf-8');\r\n        res.on('data', (c) => (data += c));\r\n        res.on('end', () => resolve(data));\r\n    });\r\n}\r\n\r\nexport async function request_stream(url: string, options?: RequestOpts): Promise<IncomingMessage> {\r\n    return new Promise(async (resolve, reject) => {\r\n        let res = await https_getter(url, options).catch((err: Error) => err);\r\n        if (res instanceof Error) {\r\n            reject(res);\r\n            return;\r\n        }\r\n        if (Number(res.statusCode) >= 300 && Number(res.statusCode) < 400) {\r\n            res = await https_getter(res.headers.location as string, options);\r\n        }\r\n        resolve(res);\r\n    });\r\n}\r\n"]}