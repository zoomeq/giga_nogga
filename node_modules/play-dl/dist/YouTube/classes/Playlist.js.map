{"version":3,"file":"Playlist.js","sourceRoot":"","sources":["../../../play-dl/YouTube/classes/Playlist.ts"],"names":[],"mappings":"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","sourcesContent":["import { getPlaylistVideos, getContinuationToken } from '../utils/extractor';\r\nimport { request } from '../utils/request';\r\nimport { Thumbnail } from './Thumbnail';\r\nimport { Channel } from './Channel';\r\nimport { Video } from './Video';\r\nconst BASE_API = 'https://www.youtube.com/youtubei/v1/browse?key=';\r\n\r\nexport class PlayList {\r\n    id?: string;\r\n    title?: string;\r\n    videoCount?: number;\r\n    lastUpdate?: string;\r\n    views?: number;\r\n    url?: string;\r\n    link?: string;\r\n    channel?: Channel;\r\n    thumbnail?: Thumbnail;\r\n    private videos?: [];\r\n    private fetched_videos: Map<string, Video[]>;\r\n    private _continuation: {\r\n        api?: string;\r\n        token?: string;\r\n        clientVersion?: string;\r\n    } = {};\r\n    private __count: number;\r\n\r\n    constructor(data: any, searchResult = false) {\r\n        if (!data) throw new Error(`Cannot instantiate the ${this.constructor.name} class without data!`);\r\n        this.__count = 0;\r\n        this.fetched_videos = new Map();\r\n        if (searchResult) this.__patchSearch(data);\r\n        else this.__patch(data);\r\n    }\r\n\r\n    private __patch(data: any) {\r\n        this.id = data.id || undefined;\r\n        this.url = data.url || undefined;\r\n        this.title = data.title || undefined;\r\n        this.videoCount = data.videoCount || 0;\r\n        this.lastUpdate = data.lastUpdate || undefined;\r\n        this.views = data.views || 0;\r\n        this.link = data.link || undefined;\r\n        this.channel = data.author || undefined;\r\n        this.thumbnail = data.thumbnail || undefined;\r\n        this.videos = data.videos || [];\r\n        this.__count++;\r\n        this.fetched_videos.set(`${this.__count}`, this.videos as Video[]);\r\n        this._continuation.api = data.continuation?.api ?? undefined;\r\n        this._continuation.token = data.continuation?.token ?? undefined;\r\n        this._continuation.clientVersion = data.continuation?.clientVersion ?? '<important data>';\r\n    }\r\n\r\n    private __patchSearch(data: any) {\r\n        this.id = data.id || undefined;\r\n        this.url = this.id ? `https://www.youtube.com/playlist?list=${this.id}` : undefined;\r\n        this.title = data.title || undefined;\r\n        this.thumbnail = data.thumbnail || undefined;\r\n        this.channel = data.channel || undefined;\r\n        this.videos = [];\r\n        this.videoCount = data.videos || 0;\r\n        this.link = undefined;\r\n        this.lastUpdate = undefined;\r\n        this.views = 0;\r\n    }\r\n\r\n    async next(limit = Infinity): Promise<Video[]> {\r\n        if (!this._continuation || !this._continuation.token) return [];\r\n\r\n        const nextPage = await request(`${BASE_API}${this._continuation.api}`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                continuation: this._continuation.token,\r\n                context: {\r\n                    client: {\r\n                        utcOffsetMinutes: 0,\r\n                        gl: 'US',\r\n                        hl: 'en',\r\n                        clientName: 'WEB',\r\n                        clientVersion: this._continuation.clientVersion\r\n                    },\r\n                    user: {},\r\n                    request: {}\r\n                }\r\n            })\r\n        });\r\n\r\n        const contents =\r\n            JSON.parse(nextPage)?.onResponseReceivedActions[0]?.appendContinuationItemsAction?.continuationItems;\r\n        if (!contents) return [];\r\n\r\n        const playlist_videos = getPlaylistVideos(contents, limit);\r\n        this.fetched_videos.set(`${this.__count}`, playlist_videos);\r\n        this._continuation.token = getContinuationToken(contents);\r\n        return playlist_videos;\r\n    }\r\n\r\n    async fetch(max = Infinity) {\r\n        const continuation = this._continuation.token;\r\n        if (!continuation) return this;\r\n        if (max < 1) max = Infinity;\r\n\r\n        while (typeof this._continuation.token === 'string' && this._continuation.token.length) {\r\n            if ((this.videos?.length as number) >= max) break;\r\n            this.__count++;\r\n            const res = await this.next();\r\n            if (!res.length) break;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    get type(): 'playlist' {\r\n        return 'playlist';\r\n    }\r\n\r\n    page(number: number): Video[] {\r\n        if (!number) throw new Error('Page number is not provided');\r\n        if (!this.fetched_videos.has(`${number}`)) throw new Error('Given Page number is invalid');\r\n        return this.fetched_videos.get(`${number}`) as Video[];\r\n    }\r\n\r\n    get total_pages() {\r\n        return this.fetched_videos.size;\r\n    }\r\n\r\n    get total_videos() {\r\n        const page_number: number = this.total_pages;\r\n        return (page_number - 1) * 100 + (this.fetched_videos.get(`${page_number}`) as Video[]).length;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            id: this.id,\r\n            title: this.title,\r\n            thumbnail: this.thumbnail,\r\n            channel: {\r\n                name: this.channel?.name,\r\n                id: this.channel?.id,\r\n                icon: this.channel?.iconURL()\r\n            },\r\n            url: this.url,\r\n            videos: this.videos\r\n        };\r\n    }\r\n}\r\n"]}