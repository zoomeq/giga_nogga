{"version":3,"file":"LiveStream.js","sourceRoot":"","sources":["../../../play-dl/YouTube/classes/LiveStream.ts"],"names":[],"mappings":";;;AAAA,mCAAqC;AAErC,sCAAuC;AACvC,8CAA2D;AAC3D,0BAAgC;AAQhC,MAAa,aAAa;IAYtB,YAAY,QAAgB,EAAE,eAAuB,EAAE,SAAiB;QACpE,IAAI,CAAC,MAAM,GAAG,IAAI,oBAAW,CAAC,EAAE,aAAa,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,IAAI,GAAG,mBAAU,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,eAAe,GAAG,IAAI,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC,EAAE,OAAO,CAAC,CAAC;QACZ,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,EAAE,CAAC;IACjB,CAAC;IAEO,KAAK,CAAC,YAAY;QACtB,MAAM,IAAI,GAAG,MAAM,cAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9C,IACI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,IAAI;YACnC,IAAI,CAAC,cAAc,CAAC,cAAc,KAAK,IAAI;YAC3C,IAAI,CAAC,aAAa,CAAC,aAAa,KAAK,GAAG,EAC1C;YACE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC;SAClD;QACD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC,EAAE,OAAO,CAAC,CAAC;IAChB,CAAC;IAEO,KAAK,CAAC,WAAW;QACrB,MAAM,QAAQ,GAAG,MAAM,iBAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM,WAAW,GAAG,QAAQ;aACvB,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;aACjC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;aAC5B,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAChC,IAAI,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE;YAAE,WAAW,CAAC,GAAG,EAAE,CAAC;QAClE,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;QACjG,MAAM,IAAI,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;QACtG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,qBAAqB,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC3F,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,EAAE;YAAE,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;IAC3F,CAAC;IAEO,OAAO;;QACX,YAAY,CAAC,IAAI,CAAC,KAAqB,CAAC,CAAC;QACzC,YAAY,CAAC,IAAI,CAAC,UAA0B,CAAC,CAAC;QAC9C,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClC,MAAA,IAAI,CAAC,OAAO,0CAAE,OAAO,EAAE,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IACtB,CAAC;IAEO,KAAK,CAAC,KAAK;QACf,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YACvB,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,OAAO;SACV;QACD,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QACzB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC;YAAE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC/F,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC;YAAE,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,IAAI,KAAK,EAAE,MAAM,OAAO,IAAI,IAAI,CAAC,aAAa,EAAE;YAC5C,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,YAAY,EAAE;gBACrE,SAAS;aACZ;YACD,MAAM,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE;gBACxC,MAAM,MAAM,GAAG,MAAM,wBAAc,CAAC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;gBACxF,IAAI,MAAM,YAAY,KAAK,EAAE;oBACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBAClC,OAAO;iBACV;gBACD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;gBACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;gBACzC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;oBAClB,IAAI,CAAC,YAAY,EAAE,CAAC;oBACpB,OAAO,CAAC,EAAE,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;oBACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBACnC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;SACN;QACD,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE;YACzB,IAAI,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtB,CAAC;CACJ;AA5GD,sCA4GC;AAED,MAAa,MAAM;IAaf,YACI,GAAW,EACX,IAAgB,EAChB,QAAgB,EAChB,aAAqB,EACrB,SAAiB,EACjB,MAAc;QAEd,IAAI,CAAC,MAAM,GAAG,IAAI,oBAAW,CAAC,EAAE,aAAa,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE;YAC1B,IAAI,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,CAAC;QAChB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC,CAAC;QACzD,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,IAAI,CAAC,UAAU,EAAE;gBACjB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;gBACrB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;aAC3C;iBAAM,IAAI,IAAI,CAAC,aAAa,KAAK,GAAG,EAAE;gBACnC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,IAAI,EAAE,CAAC;aACf;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAEO,KAAK,CAAC,KAAK;QACf,MAAM,IAAI,GAAG,MAAM,cAAU,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3D,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;IACvD,CAAC;IAEO,OAAO;;QACX,aAAa,CAAC,IAAI,CAAC,KAAqB,CAAC,CAAC;QAC1C,MAAA,IAAI,CAAC,OAAO,0CAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClC,MAAA,IAAI,CAAC,OAAO,0CAAE,OAAO,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;IAClB,CAAC;IAEO,KAAK,CAAC,IAAI;QACd,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YACvB,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,OAAO;SACV;QACD,MAAM,GAAG,GAAW,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;QAChE,MAAM,MAAM,GAAG,MAAM,wBAAc,CAAC,IAAI,CAAC,GAAG,EAAE;YAC1C,OAAO,EAAE;gBACL,KAAK,EAAE,SAAS,IAAI,CAAC,WAAW,IAAI,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE;aAC9E;SACJ,CAAC,CAAC,KAAK,CAAC,CAAC,GAAU,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,MAAM,YAAY,KAAK,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAClC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,OAAO;SACV;QACD,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,GAAG,EAAE;YAClC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACb,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE;oBAC1B,IAAI,CAAC,KAAK,EAAE,CAAC;gBACjB,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,CAAC;aACnB;YACD,OAAO;SACV;QACD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;QAEzC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAU,EAAE,EAAE;YAC7B,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,MAAM,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YAClB,IAAI,GAAG,IAAI,IAAI,CAAC,cAAc;gBAAE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAC3D,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAhHD,wBAgHC","sourcesContent":["import { PassThrough } from 'stream';\r\nimport { IncomingMessage } from 'http';\r\nimport { StreamType } from '../stream';\r\nimport { request, request_stream } from '../utils/request';\r\nimport { video_info } from '..';\r\n\r\nexport interface FormatInterface {\r\n    url: string;\r\n    targetDurationSec: number;\r\n    maxDvrDurationSec: number;\r\n}\r\n\r\nexport class LiveStreaming {\r\n    stream: PassThrough;\r\n    type: StreamType;\r\n    private base_url: string;\r\n    private url: string;\r\n    private interval: number;\r\n    private packet_count: number;\r\n    private timer: NodeJS.Timer | null;\r\n    private video_url: string;\r\n    private dash_timer: NodeJS.Timer | null;\r\n    private segments_urls: string[];\r\n    private request: IncomingMessage | null;\r\n    constructor(dash_url: string, target_interval: number, video_url: string) {\r\n        this.stream = new PassThrough({ highWaterMark: 10 * 1000 * 1000 });\r\n        this.type = StreamType.Arbitrary;\r\n        this.url = dash_url;\r\n        this.base_url = '';\r\n        this.segments_urls = [];\r\n        this.packet_count = 0;\r\n        this.request = null;\r\n        this.timer = null;\r\n        this.video_url = video_url;\r\n        this.interval = target_interval * 1000 || 0;\r\n        this.dash_timer = setTimeout(() => {\r\n            this.dash_updater();\r\n        }, 1800000);\r\n        this.stream.on('close', () => {\r\n            this.cleanup();\r\n        });\r\n        this.start();\r\n    }\r\n\r\n    private async dash_updater() {\r\n        const info = await video_info(this.video_url);\r\n        if (\r\n            info.LiveStreamData.isLive === true &&\r\n            info.LiveStreamData.hlsManifestUrl !== null &&\r\n            info.video_details.durationInSec === '0'\r\n        ) {\r\n            this.url = info.LiveStreamData.dashManifestUrl;\r\n        }\r\n        this.dash_timer = setTimeout(() => {\r\n            this.dash_updater();\r\n        }, 1800000);\r\n    }\r\n\r\n    private async dash_getter() {\r\n        const response = await request(this.url);\r\n        const audioFormat = response\r\n            .split('<AdaptationSet id=\"0\"')[1]\r\n            .split('</AdaptationSet>')[0]\r\n            .split('</Representation>');\r\n        if (audioFormat[audioFormat.length - 1] === '') audioFormat.pop();\r\n        this.base_url = audioFormat[audioFormat.length - 1].split('<BaseURL>')[1].split('</BaseURL>')[0];\r\n        const list = audioFormat[audioFormat.length - 1].split('<SegmentList>')[1].split('</SegmentList>')[0];\r\n        this.segments_urls = list.replace(new RegExp('<SegmentURL media=\"', 'g'), '').split('\"/>');\r\n        if (this.segments_urls[this.segments_urls.length - 1] === '') this.segments_urls.pop();\r\n    }\r\n\r\n    private cleanup() {\r\n        clearTimeout(this.timer as NodeJS.Timer);\r\n        clearTimeout(this.dash_timer as NodeJS.Timer);\r\n        this.request?.unpipe(this.stream);\r\n        this.request?.destroy();\r\n        this.dash_timer = null;\r\n        this.video_url = '';\r\n        this.request = null;\r\n        this.timer = null;\r\n        this.url = '';\r\n        this.base_url = '';\r\n        this.segments_urls = [];\r\n        this.packet_count = 0;\r\n        this.interval = 0;\r\n    }\r\n\r\n    private async start() {\r\n        if (this.stream.destroyed) {\r\n            this.cleanup();\r\n            return;\r\n        }\r\n        await this.dash_getter();\r\n        if (this.segments_urls.length > 3) this.segments_urls.splice(0, this.segments_urls.length - 3);\r\n        if (this.packet_count === 0) this.packet_count = Number(this.segments_urls[0].split('sq/')[1].split('/')[0]);\r\n        for await (const segment of this.segments_urls) {\r\n            if (Number(segment.split('sq/')[1].split('/')[0]) !== this.packet_count) {\r\n                continue;\r\n            }\r\n            await new Promise(async (resolve, reject) => {\r\n                const stream = await request_stream(this.base_url + segment).catch((err: Error) => err);\r\n                if (stream instanceof Error) {\r\n                    this.stream.emit('error', stream);\r\n                    return;\r\n                }\r\n                this.request = stream;\r\n                stream.pipe(this.stream, { end: false });\r\n                stream.on('end', () => {\r\n                    this.packet_count++;\r\n                    resolve('');\r\n                });\r\n                stream.once('error', (err) => {\r\n                    this.stream.emit('error', err);\r\n                });\r\n            });\r\n        }\r\n        this.timer = setTimeout(() => {\r\n            this.start();\r\n        }, this.interval);\r\n    }\r\n}\r\n\r\nexport class Stream {\r\n    stream: PassThrough;\r\n    type: StreamType;\r\n    private url: string;\r\n    private bytes_count: number;\r\n    private per_sec_bytes: number;\r\n    private content_length: number;\r\n    private video_url: string;\r\n    private timer: NodeJS.Timer | null;\r\n    private cookie: string;\r\n    private data_ended: boolean;\r\n    private playing_count: number;\r\n    private request: IncomingMessage | null;\r\n    constructor(\r\n        url: string,\r\n        type: StreamType,\r\n        duration: number,\r\n        contentLength: number,\r\n        video_url: string,\r\n        cookie: string\r\n    ) {\r\n        this.stream = new PassThrough({ highWaterMark: 10 * 1000 * 1000 });\r\n        this.url = url;\r\n        this.type = type;\r\n        this.bytes_count = 0;\r\n        this.video_url = video_url;\r\n        this.cookie = cookie;\r\n        this.timer = setInterval(() => {\r\n            this.retry();\r\n        }, 7200 * 1000);\r\n        this.per_sec_bytes = Math.ceil(contentLength / duration);\r\n        this.content_length = contentLength;\r\n        this.request = null;\r\n        this.data_ended = false;\r\n        this.playing_count = 0;\r\n        this.stream.on('close', () => {\r\n            this.cleanup();\r\n        });\r\n        this.stream.on('pause', () => {\r\n            this.playing_count++;\r\n            if (this.data_ended) {\r\n                this.bytes_count = 0;\r\n                this.per_sec_bytes = 0;\r\n                this.cleanup();\r\n                this.stream.removeAllListeners('pause');\r\n            } else if (this.playing_count === 280) {\r\n                this.playing_count = 0;\r\n                this.loop();\r\n            }\r\n        });\r\n        this.loop();\r\n    }\r\n\r\n    private async retry() {\r\n        const info = await video_info(this.video_url, this.cookie);\r\n        this.url = info.format[info.format.length - 1].url;\r\n    }\r\n\r\n    private cleanup() {\r\n        clearInterval(this.timer as NodeJS.Timer);\r\n        this.request?.unpipe(this.stream);\r\n        this.request?.destroy();\r\n        this.timer = null;\r\n        this.request = null;\r\n        this.url = '';\r\n    }\r\n\r\n    private async loop() {\r\n        if (this.stream.destroyed) {\r\n            this.cleanup();\r\n            return;\r\n        }\r\n        const end: number = this.bytes_count + this.per_sec_bytes * 300;\r\n        const stream = await request_stream(this.url, {\r\n            headers: {\r\n                range: `bytes=${this.bytes_count}-${end >= this.content_length ? '' : end}`\r\n            }\r\n        }).catch((err: Error) => err);\r\n        if (stream instanceof Error) {\r\n            this.stream.emit('error', stream);\r\n            this.data_ended = true;\r\n            this.bytes_count = 0;\r\n            this.per_sec_bytes = 0;\r\n            this.cleanup();\r\n            return;\r\n        }\r\n        if (Number(stream.statusCode) >= 400) {\r\n            this.cleanup();\r\n            await this.retry();\r\n            this.loop();\r\n            if (!this.timer) {\r\n                this.timer = setInterval(() => {\r\n                    this.retry();\r\n                }, 7200 * 1000);\r\n            }\r\n            return;\r\n        }\r\n        this.request = stream;\r\n        stream.pipe(this.stream, { end: false });\r\n\r\n        stream.once('error', (err) => {\r\n            this.stream.emit('error', err);\r\n        });\r\n\r\n        stream.on('data', (chunk: any) => {\r\n            this.bytes_count += chunk.length;\r\n        });\r\n\r\n        stream.on('end', () => {\r\n            if (end >= this.content_length) this.data_ended = true;\r\n        });\r\n    }\r\n}\r\n"]}