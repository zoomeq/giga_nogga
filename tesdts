(async () => {
const Discord = require('discord.js');
const client = new Discord.Client({ intents: [
    Discord.Intents.FLAGS.GUILDS,
    Discord.Intents.FLAGS.GUILD_MESSAGES,
    Discord.Intents.FLAGS.GUILD_VOICE_STATES,
    Discord.Intents.FLAGS.GUILD_PRESENCES,
    Discord.Intents.FLAGS.GUILD_MEMBERS
]});
client.commands = new Discord.Collection();
const {prefix, token} = require('./config.json');
const delay = (msec) => new Promise((resolve) => setTimeout(resolve, msec));
const clientId = 'shfsszr89h2ads7wekxa0wz2droq4a';
const ttvToken = 'pvjvh3bzcwc6vgjo8hlqn2r5mbr8pw'
const {ApiClient} = require('twitch');
const {StaticAuthProvider} = require('twitch-auth');
const authProvider = new StaticAuthProvider(clientId, ttvToken);
const apiClient = new ApiClient({authProvider});
const CronJob = require('cron').CronJob;
const db = require('quick.db');
const voice = require('@discordjs/voice');
const logs = require('discord-logs');
const fetch = require('node-fetch');
logs(client);

const messhook = new Discord.WebhookClient({url: 'https://discord.com/api/webhooks/883438311543279626/VWaLA2Za2NWyzyjWBpXN4rqf2eFOUmeBtc7coLWQ6m33H21_sIxx-dUFc1RYGCoHY9TP'});
const voicehook = new Discord.WebhookClient({url: 'https://discord.com/api/webhooks/883439406701240390/s65GFxF7SkikTxqyKytD6NbuoaoBSYP5m5dHVHbtD_wPw5B8_Z-MdjH9Og0dcckXucAc'});
const banshook = new Discord.WebhookClient({url: 'https://discord.com/api/webhooks/883439928258723900/AG6Yssmll2arRBW4yrWfZrjZcG3EIIwiTqx69Re8O30Glj4VsQvp3ZHiAOYRSyaUXWix'});

const play = require('play-dl');
let player = voice.createAudioPlayer();


client.login(token);

async function getGuild(){
    return client.guilds.fetch('619100495423864842');
}

let guild = await getGuild();
let channel = await guild.channels.fetch('882321742729711637');
async function isStreamLive(userName){
    const user = await apiClient.helix.users.getUserByName(userName);
    if(!user){
        return false;
    }
    return user.getStream();
}

client.once('ready', async () => {
    console.log('Ready!');
    
    //stream checker
    var xayoo = new CronJob('0 */1 * * * *', async () => {
        let streamStatus = await isStreamLive('Xayoo_').catch((error) => {
            console.error(error);
            return;
        });
        
        let user = 'xayoo'
        let a = db.get(user).toString();
        if(streamStatus != null && a == 'false'){
            channel.send(`@here\nXayoo właśnie odpalił streama:\nhttps://www.twitch.tv/xayoo_`);
            db.delete(user);
            db.push(user, 'true');
        }else if(streamStatus == null && a == 'true'){
            db.delete(user);
            db.push(user, 'false');
        } 
    });
    xayoo.start();
    
    var popo = new CronJob('20 */1 * * * *', async () => {
        let streamStatus = await isStreamLive('Popo').catch((error) => {
            console.error(error);
            return;
        });;
        let user = 'popo'
        let a = db.get(user).toString();
        if(streamStatus != null && a == 'false'){
            channel.send(`@here\nPopo właśnie odpalił streama:\nhttps://www.twitch.tv/popo`);
            db.delete(user);
            db.push(user, 'true');
        }else if(streamStatus == null && a == 'true'){
            db.delete(user);
            db.push(user, 'false');
        }
    });
    popo.start();

    var vysotzky = new CronJob('40 */1 * * * *', async () => {
        let streamStatus = await isStreamLive('vysotzky').catch((error) => {
            console.error(error);
            return;
        });;
        let user = 'vysotzky'
        let a = db.get(user).toString();
        if(streamStatus != null && a == 'false'){
            channel.send(`@here\nVysotzky właśnie odpalił streama:\nhttps://www.twitch.tv/vysotzky`);
            db.delete(user);
            db.push(user, 'true');
        }else if(streamStatus == null && a == 'true'){
            db.delete(user);
            db.push(user, 'false');
        }
    });
    vysotzky.start();

});

let args, connection, serverQueue = {
    songs: [],
    durations: []
  };
  
  player.on(voice.AudioPlayerStatus.Idle, () => {
    if(!serverQueue.songs[1]) return connection.destroy();
    serverQueue.songs.shift();
    player.play(serverQueue.songs[0]);
  })
  
  client.on("messageCreate", async message => {
    if (message.author.bot) return;
    if (!message.content.startsWith(prefix)) return;
    
    args = message.content.slice(prefix.length).trim().split(/ +/);
    let command = args.shift().toLowerCase();
  
    
    if (command == 'play') {
      let vc = message.member.voice.channel;
      console.log(vc);
      if(!vc) return message.channel.send('Najpierw dołącz do kanału głosowego!');
      let songS = args.join(' '), type, songAr, song;
      if(songS.includes('spotify')) return message.channel.send('Sorry, nie obsługuję jeszcze spoti :p');
      if(songS.includes('soundcloud')) return message.channel.send('Sorry, nie obsługuję jeszcze soundclouda :p');
      if(!type || type == 'yt_video'){
        songAr = await play.search(songS, {limit: 1});
        song = songAr[0];
      }else if(type == 'yt_playlist'){
        return message.channel.send('Sorry, nie obsługuję jeszcze playlist :p');
      }
      let stream = await play.stream(song.url);
      let resource = voice.createAudioResource(stream.stream, {
        inputType: stream.type
      });
      message.channel.send(`Właśnie dodałem do kolejki: ${song.url}`)
  
      serverQueue.songs.push(resource);
    //   if(!connection){
        
    //     connection = voice.joinVoiceChannel({
    //       channelId: vc.id,
    //       guildId: vc.guild.id,
    //       adapterCreator: vc.guild.voiceAdapterCreator,
    //     });
    //     player.play(serverQueue.songs[0]);
    //     connection.subscribe(player);
        
    //   }
        try{
          connection = await voice.joinVoiceChannel({
          channelId: vc.id,
          guildId: vc.guild.id,
          adapterCreator: vc.guild.voiceAdapterCreator,
        });
        }catch(error){
            console.log(error);
        }
      
    } else if (command == 'skip') {
      if(!serverQueue.songs[1]){
        message.channel.send(`Nie było czego pomijać, rozłączyłem się.`)
        return connection.destroy();
      }
      serverQueue.songs.shift();
      player.play(serverQueue.songs[0]);
      message.channel.send(`Pomienięte!`);
    } else if (command == 'stop') {
      serverQueue.songs = [];
      serverQueue.durations = [];
      connection.destroy();
    } else {
      message.channel.send("Podaj prawidłową komendę!");
    }
  });


// LOGI
//      MESSAGE

client.on("messageUpdate", async (oldmess, newmess) => {
    if(oldmess.author.bot) return;
    let oContent = oldmess.content, nContent = newmess.content, author = oldmess.author, channelId = oldmess.channel.id;
    if(!oContent) oContent = '-----';
    if(!nContent) nContent = '-----';
    if(!author) author = '-----';
    if(!channelId) channelId = '-----';
    const embed = new Discord.MessageEmbed()
        .setAuthor(`Message edited!`, oldmess.author.avatarURL({dynamic: true}))
        .setColor(`2ae3f7`)
        .addFields(
            {
                name: `Old message:`,
                value: oContent,
                inline: false
            },
            {
                name: `New message:`,
                value: nContent,
                inline: false
            },
            {
                name: `Message author:`,
                value: `<@${author.id}>`,
                inline: false
            },
            {
                name: `Channel:`,
                value: `<#${channelId}>`,
                inline: false
            },
        )
        .setTimestamp(Date.now())
    try{
    messhook.send({
        username: client.user.username+'-logger',
        avatarURL: client.user.avatarURL({dynamic: true}),
        embeds: [embed],
    }).then(() => {
        embed.spliceFields(0,4);
    });
    } catch (error){
        console.error(error);
    };
});

client.on("messageDelete", async (message) => {
    if(message.author.bot) return;
    let content = message.content, author = message.author, channelId = message.channel.id;
    if(!content) content = '-----';
    if(!author) author = '-----';
    if(!channelId) channelId = '-----'
    const embed = new Discord.MessageEmbed()
        .setAuthor(`Message deleted!`, message.author.avatarURL({dynamic: true}))
        .setColor(`188894`)
        .addFields(
            {
                name: `Message:`,
                value: content,
                inline: false
            },
            {
                name: `Message author:`,
                value: `<@${author.id}>`,
                inline: false
            },
            {
                name: `Channel:`,
                value: `<#${channelId}>`,
                inline: false
            },
        )
        .setTimestamp(Date.now())
        try{
        messhook.send({
            username: client.user.username+'-logger',
            avatarURL: client.user.avatarURL({dynamic: true}),
            embeds: [embed],
        }).then(() => {
            embed.spliceFields(0,3);
        });
    } catch(error){
        console.error(error);
    };
});

client.on("messageDeleteBulk", async (message) => {
    if(message.last().author.bot) return;
    let content = message.last().content, author = message.last().author, channelId = message.last().channel.id;
    if(!content) content = '-----';
    if(!author) author = '-----';
    if(!channelId) channelId = '-----'
    const embed = new Discord.MessageEmbed()
        .setAuthor(`Message deleted (BULK)!`, message.last().author.avatarURL({dynamic: true}))
        .setColor(`074045`)
        .addFields(
            {
                name: `Last message author:`,
                value: `<@${author.id}>`,
                inline: false
            },
            {
                name: `Last message content:`,
                value: `${content}`,
                inline: false
            },
            {
                name: `Channel:`,
                value: `<#${channelId}>`,
                inline: false
            },
        )
        .setTimestamp(Date.now())
        try{
            messhook.send({
                username: client.user.username+'-logger',
                avatarURL: client.user.avatarURL({dynamic: true}),
                embeds: [embed],
            }).then(() => {
                embed.spliceFields(0,3);
            });
        } catch(error){
            console.error(error);
        };
});

//      VOICE

client.on("voiceChannelJoin", (member, vcchannel) => {
    let uId = member.user.id, vc = vcchannel.name;
    if(!uId) uId = '-----';
    if(!vc) vc = '-----';
    const embed = new Discord.MessageEmbed()
        .setAuthor(`User joined voice channel!`, member.user.avatarURL({dynamic: true}))
        .setColor(`59eae4`)
        .addFields(
            {
                name: `User:`,
                value: `<@${uId}>`,
                inline: false
            },
            {
                name: `Channel:`,
                value: `${vc}`,
                inline: false
            },
        )
        .setTimestamp(Date.now())
        try{
            voicehook.send({
                username: client.user.username+'-logger',
                avatarURL: client.user.avatarURL({dynamic: true}),
                embeds: [embed],
            });
        } catch(error){
            console.error(error);
        };
});

client.on("voiceChannelLeave", (member, channel) => {
    let uId = member.user.id, vc = channel.name;
    if(!uId) uId = '-----';
    if(!vc) vc = '-----';
    const embed = new Discord.MessageEmbed()
        .setAuthor(`User left voice channel!`, member.user.avatarURL({dynamic: true}))
        .setColor(`e4380b`)
        .addFields(
            {
                name: `User:`,
                value: `<@${uId}>`,
                inline: false
            },
            {
                name: `Channel:`,
                value: `${vc}`,
                inline: false
            },
        )
        .setTimestamp(Date.now())
        try{
            voicehook.send({
                username: client.user.username+'-logger',
                avatarURL: client.user.avatarURL({dynamic: true}),
                embeds: [embed],
            });
        } catch(error){
            console.error(error);
        };
});

client.on("voiceChannelSwitch", (member, oldchannel, newchannel) => {
    let uId = member.user.id, ovc = oldchannel.name, nvc = newchannel.name;
    if(!uId) uId = '-----';
    if(!ovc) ovc = '-----';
    if(!nvc) ovc = '-----';
    const embed = new Discord.MessageEmbed()
        .setAuthor(`User switched voice channel!`, member.user.avatarURL({dynamic: true}))
        .setColor(`24e124`)
        .addFields(
            {
                name: `User:`,
                value: `<@${uId}>`,
                inline: false
            },
            {
                name: `Previous channel:`,
                value: `${ovc}`,
                inline: false
            },
            {
                name: `Actual channel:`,
                value: `${nvc}`,
                inline: false
            },
        )
        .setTimestamp(Date.now())
        try{    
            voicehook.send({
                username: client.user.username+'-logger',
                avatarURL: client.user.avatarURL({dynamic: true}),
                embeds: [embed],
            });
        } catch(error){
            console.error(error);
        };
});

//      BANS

client.on("guildBanAdd", (guild, user) => {
    const embed = new Discord.MessageEmbed()
        .setAuthor(`User banned on server!`, user.avatarURL({dynamic: true}))
        .setColor(`980f1f`)
        .addFields(
            {
                name: `User:`,
                value: `${user.tag}\n${user}`,
                inline: false
            },
        )
        .setTimestamp(Date.now())

        try{
            banshook.send({
                username: client.user.username+'-logger',
                avatarURL: client.user.avatarURL({dynamic: true}),
                embeds: [embed],
            });
        } catch(error){
            console.error(error);
        };
    
});

client.on("guildBanRemove", (guild, user) => {
    const embed = new Discord.MessageEmbed()
        .setAuthor(`User unbanned on server!`, user.avatarURL({dynamic: true}))
        .setColor(`2ce709`)
        .addFields(
            {
                name: `User:`,
                value: `${user.tag}\n${user}`,
                inline: false
            },
        )
        .setTimestamp(Date.now())

        try{
            banshook.send({
                username: client.user.username+'-logger',
                avatarURL: client.user.avatarURL({dynamic: true}),
                embeds: [embed],
            });
        } catch(error){
            console.error(error);
        };
    
});

client.on("error", (e) => console.error(e));
client.on("warn", (e) => console.warn(e));
// client.on("debug", (e) => console.info(e));


return;
})();
